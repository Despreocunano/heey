---
interface BreadcrumbItem {
  label: string;
  href: string;
  current?: boolean;
}

interface Props {
  items: BreadcrumbItem[];
  textColor?: string;
}

const { items, textColor = "text-gray-500" } = Astro.props;

// Generate JSON-LD schema
const schemaData = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": items.map((item, index) => ({
    "@type": "ListItem",
    "position": index + 1,
    "item": {
      "@id": `${Astro.url.origin}${item.href}`,
      "name": item.label
    }
  }))
};
---

{/* Visible Breadcrumb */}
<nav class="max-w-6xl mx-auto px-4 py-4" aria-label="Breadcrumb">
  <ol class="flex items-center space-x-2 text-sm">
    {items.map((item, index) => (
      <li class="flex items-center">
        {index > 0 && (
          <svg class={`h-5 w-5 ${textColor} mx-2`} fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
          </svg>
        )}
        {item.current ? (
          <span class={`font-medium ${textColor}`} aria-current="page">
            {item.label}
          </span>
        ) : (
          <a 
            href={item.href}
            class={`hover:text-lime-600 ${textColor}`}
          >
            {item.label}
          </a>
        )}
      </li>
    ))}
  </ol>
</nav>

{/* Schema Markup */}
<script type="application/ld+json" set:html={JSON.stringify(schemaData)} />