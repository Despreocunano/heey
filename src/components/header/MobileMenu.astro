---
import Logo from './Logo.astro';

const menuItems = [
  { label: 'Inicio', href: '/' },
  { label: 'Tarjetas de Crédito', href: '/tarjetas-de-credito' },
  { label: 'Bancos', href: '/banco' }
];
---

<div class="md:hidden">
  <button
    type="button"
    id="mobile-menu-button"
    class="inline-flex items-center justify-center p-2 rounded-md text-white hover:red-red-700 focus:outline-none"
    aria-expanded="false"
  >
    <span class="sr-only">Abrir menú</span>
    <svg class="block h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
    </svg>
  </button>
</div>

<div 
  id="mobile-menu"
  class="hidden fixed inset-0 z-50 md:hidden"
  role="dialog"
  aria-modal="true"
>
  <div class="fixed inset-0 bg-black/95 opacity-0 transition-opacity duration-500 ease-in-out" id="menu-overlay"></div>
  <div class="relative h-full">
    <div class="absolute left-0 top-0 w-full max-w-sm h-full transform -translate-x-full transition-transform duration-500 ease-in-out">
      <div class="h-full flex flex-col bg-black">
        <div class="px-6 pt-6 pb-4">
          <div class="flex items-center justify-between mb-6">
            <Logo />
            <button 
              type="button"
              id="close-menu-button"
              class="p-2 text-white hover:text-gray-200 focus:outline-none"
            >
              <span class="sr-only">Cerrar menú</span>
              <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <div class="h-0.5 bg-red-600 scale-x-0 transition-transform duration-1000 ease-in-out origin-left" id="menu-line"></div>
        </div>
        
        <nav class="flex-1 px-3">
          <ul class="space-y-1">
            {menuItems.map((item, index) => (
              <li 
                class="opacity-0 -translate-x-4 transition-all duration-500 ease-in-out"
                style={`transition-delay: ${400 + index * 200}ms`}
              >
                <a
                  href={item.href}
                  class="flex items-center px-3 py-4 text-2xl font-bold text-white hover:bg-white/10 rounded-lg"
                >
                  <span>{item.label}</span>
                  <svg 
                    class="ml-auto h-5 w-5 text-white/70" 
                    viewBox="0 0 20 20" 
                    fill="currentColor"
                  >
                    <path 
                      fill-rule="evenodd" 
                      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" 
                      clip-rule="evenodd" 
                    />
                  </svg>
                </a>
              </li>
            ))}
          </ul>
        </nav>
      </div>
    </div>
  </div>
</div>

<script>
  const mobileMenu = document.getElementById('mobile-menu');
  const menuButton = document.getElementById('mobile-menu-button');
  const closeButton = document.getElementById('close-menu-button');
  const menuOverlay = document.getElementById('menu-overlay');
  const panel = mobileMenu?.querySelector('.max-w-sm');
  const menuLine = document.getElementById('menu-line');
  const menuItems = panel?.querySelectorAll('li');

  function toggleMenu(show: boolean) {
    if (!mobileMenu || !panel || !menuButton || !menuLine || !menuOverlay) return;
    
    menuButton.setAttribute('aria-expanded', show.toString());
    
    if (show) {
      mobileMenu.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      
      // Forzar un reflow
      mobileMenu.getBoundingClientRect();
      
      // Mostrar overlay
      menuOverlay.classList.add('opacity-100');
      
      // Mostrar menú y línea
      panel.classList.remove('-translate-x-full');
      menuLine.classList.add('scale-x-100');
      
      // Animar items
      menuItems?.forEach(item => {
        item.classList.remove('opacity-0', '-translate-x-4');
      });
    } else {
      menuOverlay.classList.remove('opacity-100');
      panel.classList.add('-translate-x-full');
      menuLine.classList.remove('scale-x-100');
      document.body.style.overflow = '';
      
      // Resetear items
      menuItems?.forEach(item => {
        item.classList.add('opacity-0', '-translate-x-4');
      });
      
      // Esperar a que termine la transición
      setTimeout(() => {
        mobileMenu.classList.add('hidden');
      }, 500);
    }
  }

  menuButton?.addEventListener('click', () => toggleMenu(true));
  closeButton?.addEventListener('click', () => toggleMenu(false));
  menuOverlay?.addEventListener('click', () => toggleMenu(false));

  // Cerrar al navegar
  document.addEventListener('astro:after-navigation', () => toggleMenu(false));
</script>